import { firestore } from 'firebase-admin'
import { FirestoreClient } from '../src'
import { docMapper } from '../src/helper'

try {
  const keys = require('../keys')

  let fsClient: FirestoreClient
  let docId: string

  test('FirestoreClient - Init should work with one project', () => {
    fsClient = new FirestoreClient(keys.imsKey)
    expect(fsClient).toBeDefined()
  })

  test('FirestoreClient.getDatabase - Should return a Firestore database object', () => {
    const database = fsClient.getDatabase()
    expect(database instanceof firestore.Firestore).toBeTruthy()
  })

  test('FirestoreClient.createDoc - Should create a document in the test collection', async () => {
    let error = null
    try {
      docId = await fsClient.createDoc('test', {
        i: 'am',
        a: 'test'
      })
    } catch (err) {
      error = err
    }
    expect(error).toBeNull()
    expect(docId).toBeDefined()
  })

  test('FirestoreClient.getAllDocs - Should return all documents of a collection', async () => {
    const result = await fsClient.getAllDocs('test')
    expect(result).toBeDefined()
    const { docs: querySnapshots } = result
    expect(querySnapshots instanceof Array).toBeTruthy()
    const docs = querySnapshots.map(docMapper)
    expect(docs[0].i).toBe('am')
    expect(docs[0].a).toBe('test')
  })

  test('FirestoreClient.getDoc - Should return data of the document', async () => {
    const result = await fsClient.getDoc('test', docId)
    expect(result).toBeDefined()
    expect(result.i).toBe('am')
    expect(result.a).toBe('test')
  })

  test('FirestoreClient.upsertDoc (CREATE) - Should create a new document with the given id', async () => {
    const result = await fsClient.upsertDoc('test', 'testDoc', {
      i: 'am',
      another: 'test'
    })
    expect(result).toBeDefined()
    expect(result.i).toBe('am')
    expect(result.another).toBe('test')
  })

  test('FirestoreClient.getDocs - Should return two documents as an array', async () => {
    const result = await fsClient.getDocs('test', [docId, 'testDoc'])
    expect(result).toBeDefined()
    expect(result instanceof Array).toBeTruthy()
    expect(result).toHaveLength(2)
  })

  test('FirestoreClient.upsertDoc (UPDATE) - Should update the given document', async () => {
    const result = await fsClient.upsertDoc('test', 'testDoc', {
      i: 'am not'
    })
    expect(result).toBeDefined()
    expect(result.i).toBe('am not')
  })

  test('FirestoreClient.getDocWithFilter - Should return with the document which fits to the filter', async () => {
    const filterParams = {
      fieldPath: 'i',
      opStr: '==',
      value: 'am not'
    }
    const result = await fsClient.getDocWithFilter('test', filterParams)
    expect(result).toBeDefined()
    expect(result.i).toBe('am not')
    expect(result.another).toBe('test')
    expect(result.id).toBe('testDoc')
  })

  test('FirestoreClient.deleteDoc - Should delete the given document', async () => {
    let error = null
    try {
      await fsClient.deleteDoc('test', 'testDoc')
    } catch (err) {
      error = err
    }
    expect(error).toBeNull()
  })

  test('FirestoreClient - Init should work with multiple projects (multiple)', () => {
    fsClient = new FirestoreClient([{
      identifier: 'ims',
      serviceAccount: keys.imsKey
    }, {
      identifier: 'handover',
      serviceAccount: keys.handoverKey
    }
    ], 'handover')
    expect(fsClient).toBeDefined()
  })

  test('FirestoreClient.getAllDocs - Should return all documents of a collection (multiple)', async () => {
    const result = await fsClient.getAllDocs('test', 'ims')
    expect(result).toBeDefined()
    const { docs: querySnapshots } = result
    expect(querySnapshots instanceof Array).toBeTruthy()
    const docs = querySnapshots.map(docMapper)
    expect(docs).toHaveLength(1)
    expect(docs[0].i).toBe('am')
    expect(docs[0].a).toBe('test')
  })

  test('FirestoreClient.updateDoc - Should update a document by id', async () => {
    const result = await fsClient.updateDoc('test', docId, {
      i: 'am not'
    }, 'ims')
    expect(result).toBeDefined()
  })

  test('FirestoreClient.deleteDoc - Should delete the given document (multiple)', async () => {
    let error = null
    try {
      await fsClient.deleteDoc('test', docId, 'ims')
    } catch (err) {
      error = err
    }
    expect(error).toBeNull()
  })


} catch (err) {
  console.log('No keys found. Cannot run tests without keys.')
}
