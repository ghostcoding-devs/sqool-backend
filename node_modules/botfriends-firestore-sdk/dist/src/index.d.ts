import { firestore, ServiceAccount } from 'firebase-admin';
import { ExtendedServiceAccount, FilterOptions, ExtendedDocument } from './interfaces';
export declare class FirestoreClient {
    private databases;
    constructor(connectionCredentials: ExtendedServiceAccount[] | ServiceAccount, defaultDbIdentifier?: string);
    getDatabase(dbIdentifier?: string): firestore.Firestore;
    getDbCollection(collection: string, dbIdentifier?: string): firestore.CollectionReference;
    getDoc(collection: string, id: string, dbIdentifier?: string): Promise<firestore.DocumentData>;
    getDocs(collection: string, ids: string[], dbIdentifier?: string): Promise<ExtendedDocument[]>;
    getAllDocs(collection: string, dbIdentifier?: string): Promise<firestore.QuerySnapshot>;
    getDocWithFilter(collection: string, filterParams: FilterOptions, dbIdentifier?: string): Promise<ExtendedDocument>;
    getDocsWithFilter(collection: string, filterParams: FilterOptions, dbIdentifier?: string): Promise<ExtendedDocument[]>;
    createDoc(collection: string, payload: any, id?: string, dbIdentifier?: string): Promise<string>;
    updateDoc(collection: string, id: string, payload: any, dbIdentifier?: string): Promise<firestore.WriteResult>;
    upsertDoc(collection: string, id: string, payload: any, dbIdentifier?: string): Promise<any>;
    upsertDocsWithFilter(collection: string, payload: any, filterParams: FilterOptions, dbIdentifier?: string): Promise<any>;
    getDocsWithMultipleFilters(collection: string, filterParams: FilterOptions[], dbIdentifier?: string): Promise<any>;
    deleteDoc(collection: string, id: string, dbIdentifier?: string): Promise<void>;
}
